[user]
	name = Wang lei 
	email = wang.lei@rea-group.com
[github]

[core]
  excludesfile = ~/.gitignore
  autocrlf = input
  pager = less -FRSX
	editor = vim 
[merge]
  tool = vimdiff
[alias]
  a  = add -p
  ap = add -p
  s  = status -sb
  st = status
  ci = commit
  cm = commit -m
  cv = commit -v
  cav= commit -av
  co = checkout
  cp = checkout -p
  br = branch
  d  = diff
  di = diff
  dif= diff
  ds = diff --stat
  dc = diff --cached
  pr = pull --rebase
  ps = push
  rc = rebase --continue
  ri = rebase --interactive
  rcontinue = rebase --continue
  rs = rebase --skip
  rskip = rebase --skip
  rabort = rebase --abort
  recover = reset --hard
  dif = diff
  oneline = log --pretty=oneline --since='2 days ago' --abbrev-commit
  onelog = log -p -1 --abbrev-commit
  #l    = log --graph --oneline --abbrev-commit --decorate --all
  
  # custom log that is a copy of Gary Bernhardt's
  l  = "!source ~/.githelpers && pretty_git_log"
  aa = add --all
  glog = log --graph --oneline --abbrev-commit --decorate --all --pretty='%Cgreen%h%Creset %Cred%cr%Creset %s %Cgreen<%aN>%Creset'
  unstage = reset HEAD --
  last = log -1 HEAD
  g = grep --break --heading --line-number

  # Fancy logging.
  #   h = head
  #   hp = head with patch
  #   r = recent commits, only current branch
  #   ra = recent commits, all reachable refs
  #   l = all commits, only current branch
  #   la = all commits, all reachable refs
  l = log --graph --pretty=format:'%C(yellow)%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=short
  la = !git l --all
  head = !git l -1
  h = !git head
  hp = "!source ~/.githelpers && show_git_head"
  r = !git l -30
  ra = !git r --all

  l1   = !git l -1
  l2   = !git l -2
  l3   = !git l -3
  l4   = !git l -4
  l5   = !git l -5
  l6   = !git l -6
  l7   = !git l -7
  l8   = !git l -8
  l9   = !git l -9
  la1   = !git la -1
  la2   = !git la -2
  la3   = !git la -3
  la4   = !git la -4
  la5   = !git la -5
  la6   = !git la -6
  la7   = !git la -7
  la8   = !git la -8
  la9   = !git la -9


  c    = config -l
    s    = status -sb
    l    = log --pretty=oneline --abbrev-commit --abbrev=4 --decorate -25
    ll   = log --pretty=oneline --abbrev-commit --abbrev=4 --decorate
    g    = log --pretty=oneline --abbrev-commit --abbrev=4 -25 --graph --decorate
    gg   = log --pretty=oneline --abbrev-commit --abbrev=4 --graph --decorate
    rp   = rev-parse --short=4
    b    = branch
    ss   = !git snapshot
    save = !git snapshot


# General purpose aliases:
#     snapshot
#     backup
#     stat
#     days
#
# Educational aliases:
#    create-file
#    simple-commit
#    multiple-commit
#    simple-loop
#    simple-loop2
#    clear
#    branches


# Alias: snapshot
# Example:
#
#    git snapshot This is my very important commit...
#    git snapshot "This is my very important commit..."
#    git snapshot
#
    snapshot = "!snapshot() { COMMENT=wip; if [ \"$*\" ]; then  COMMENT=\"$*\"; fi; git add -A; git commit -m \"$COMMENT\"; }; snapshot"


# Alias: backup
# Example:
#
#    git backup This is my very important commit...
#    git backup "This is my very important commit..."
#
    backup = "!backup() { git snapshot \"$*\"; git push; }; backup"


# Alias: days
# Example:
#
#    git days
#
    days = "!days() { git log --pretty=format:%cd --date=short | uniq; }; days"


# Alias: stat
# Example:
#
#    git stat
#
    stat = "!stat() { echo Number of revisions:; git log --oneline | wc -l; echo Number of developers:; git shortlog -s | wc -l; echo Number of days:; git days | wc -l; echo The working directory:; du -h -s -I=.git; echo The git directory:; du -h -s .git; echo Number of files in the working dir:; git ls-files | wc -l; }; stat"

# Alias: create-file
# Example:
#
#    git create-file lorem
#    git create-file lorem ipsum dolor
#
    create-file = "!createFile() { for name in \"$@\"; do echo $name>$name.txt; done; }; createFile"


# Alias: simple-commit
# Example:
#
#    git simple-commit a
#    git simple-commit a b c
#
    simple-commit = "!simpleCommit() { for name in \"$@\"; do git create-file \"$name\"; git snapshot $name; done; }; simpleCommit"


# Alias: multiple-commit
# Example:
#
#    git multi-commit lorem
#    git multi-commit lorem ipsum dolor
#
    multi-commit = "!multiCommit() { for name in \"$@\"; do git create-file $name; done; git snapshot \"$*\"; }; multiCommit"


# Alias: simple-loop
# Example:
#
#    git simple-loop lorem 5
#
    simple-loop = "!simpleLoop() { NAME=$1; i="1"; while [ $i -le $2 ]; do git simple-commit $NAME$i; i=$[$i+1]; done; }; simpleLoop"


# Alias: simple-loop2
# Example:
#
#    git simple-loop2 lorem 7 13
#
    simple-loop2 = "!simpleLoop2() { NAME=$1; i=$2; while [ $i -le $3 ]; do git simple-commit $NAME$i; i=$[$i+1]; done; }; simpleLoop2"


# Alias: branches
# Example:
#
#    git branches lorem ipsum dolor
#
    branches = "!branches() { for name in \"$@\"; do git branch $name; done; }; branches"



# Clonning with remote branches
#
# Command to list remote branches:
#
#    git branch -r | sed "/->/d; s/  origin\///g"
#
    list-remote-branches = "!listRemoteBranches() { git branch -r | sed \"/->/d; s/  origin\\///g\"; }; listRemoteBranches"
    checkout-remote-branches = "!checkoutRemoteBranches() { for name in `git list-remote-branches`; do git checkout $name; done; }; checkoutRemoteBranches"
#
# Example:
#
#   git clone-with-branches dirSrc dirDest
#
    clone-with-branches = "!cloneWithBranches() { git clone $1 $2; cd $2; git checkout-remote-branches; git remote rm origin; }; cloneWithBranches"

#@todo: check parameters:
#   git clone-with-branches URL



    # Example:
    #
    #   git checkout beta
    #   git set-version 0.1.0
    #
    # assumptions:
    #  - clean repo
    #
    # @git get-version === cat version.txt

    set-version = "!setVersion() { echo $1 > version.txt; git snapshot Version $1; git tag -a v$1 -m \"Release $1\";  }; setVersion"
    get-version = "!getVersion() { cat version.txt; }; getVersion"



# Remove old commits
#
#    git clear-reflog-now
#
    clear-reflog-now = "!clearReflogNow() { git reflog expire --all --expire=now;  }; clearReflogNow"
    remove-old-commits = "!removeOldCommits() { git clear-reflog-now; git prune;  }; removeOldCommits"


[color]
  branch = auto
  diff = auto
  interactive = auto
  status = auto
  ui = auto
[submodule "cucumber/shared_pages"]
  ignore = dirty
[submodule "cucumber/shared_steps"]
  ignore = dirty
[submodule "gremlin"]
  ignore = dirty
[grep]
  extendRegexp = true
  lineNumber = true
[push]
  default = current
